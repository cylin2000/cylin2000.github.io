<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Calvin's Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-05-05T11:16:43+08:00</updated> <author> <name>Calvin</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Calvin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Bash 踩坑指南</title><link href="/2020/04/bash-experience/" rel="alternate" type="text/html" title="Bash 踩坑指南" /><published>2020-04-07T17:44:00+08:00</published> <updated>2020-04-07T17:44:00+08:00</updated> <id>/2020/04/bash-experience/</id> <content src="/2020/04/bash-experience/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 最近项目逐步迁移到AWS平台上，相关的代码管理和自动化部署也由TFS迁移到GitHub+Jenkins方案上，为此写了不少的bash脚本用来自动化部署和测试，也踩了相当多的坑，在此总结一下。 Shell的种类 和Windows平台不一样，在Linux系统下，有多种Shell，所以同样的脚本，不同的解释器执行结果可能是不一样的，下面列举了常见的Shell种类。 sh : sh 的全称是 Bourne shell，由 AT&amp;amp;T 公司的 Steve Bourne开发，为了纪念他，就用他的名字命名了，是第一个流行的shell bash : Bourne-Again SHell dash ： theDebian Almquist Shell， Ubuntu的/bin/sh默认链接到dash csh, tcsh, zsh, oh-my-zsh busyb... </summary> </entry> <entry><title>给 Sublime Text 3 创建一个 markdeep 插件</title><link href="/2020/03/sublimetext3-markdeep/" rel="alternate" type="text/html" title="给 Sublime Text 3 创建一个 markdeep 插件" /><published>2020-03-18T17:00:00+08:00</published> <updated>2020-03-18T17:00:00+08:00</updated> <id>/2020/03/sublimetext3-markdeep/</id> <content src="/2020/03/sublimetext3-markdeep/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 本文介绍如何创建一个Sublime Text 3的插件，并用这个插件自动预览markdown文件 markdeep 简介 markdeep 是一个轻巧的markdown解析器，只需要一行代码就可以直接解析本地的markdown文件。 使用方法是将md文件改名为html结尾，如 test.md 改成 test.md.html，并且在文件最后面增加如下代码，双击用浏览器打开即可 &amp;lt;!-- Markdeep: --&amp;gt;&amp;lt;style class="fallback"&amp;gt;body{visibility:hidden;white-space:pre;font-family:monospace}&amp;lt;/style&amp;gt;&amp;lt;script src="markdeep.min.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src="https:... </summary> </entry> <entry><title>在 Ubuntu 上安装配置 PHP 环境</title><link href="/2018/08/install-php-on-ubuntu/" rel="alternate" type="text/html" title="在 Ubuntu 上安装配置 PHP 环境" /><published>2018-08-01T17:00:00+08:00</published> <updated>2018-08-01T17:00:00+08:00</updated> <id>/2018/08/install-php-on-ubuntu/</id> <content src="/2018/08/install-php-on-ubuntu/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 原有的服务器快到期了，趁活动搞了个阿里云的Ubuntu主机，所以将一些测试的php代码移到这台主机下，下面记录一下在阿里云的Ubuntu上安装php环境的步骤。 系统概况 OS : Ubuntu 18.04 Web服务器 : Apache2 PHP : PHP 7.0 + 数据库 : Mysql 5.6 + 安装 Apache2 &amp;amp; PHP # 更新apt-get安装源 sudo apt-get update # 安装Apache2 sudo apt-get install apache2 # 安装php7.0 sudo apt-get install php7.0 # 查看安装的php版本，命令行指定的是7.0，系统可能是安装7.0或以上某个稳定版本，如 7.2 php -v # 查看apache支持php的扩展 apt-cache sea... </summary> </entry> <entry><title>如何在 JavaScript 中使用 Async Await</title><link href="/2018/05/javascript-async-await/" rel="alternate" type="text/html" title="如何在 JavaScript 中使用 Async Await" /><published>2018-05-06T17:00:00+08:00</published> <updated>2021-05-05T10:44:27+08:00</updated> <id>/2018/05/javascript-async-await/</id> <content src="/2018/05/javascript-async-await/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="开发语言" /> <summary> JavaScript 是一个同步的单线程执行的语言，这意味着，JS代码是从头到挨着顺序执行的，这肯定跟我们大多数多JS开发的人心里的想法不符，因为写JS需要很多异步操作，包括请求网络资源(Web)，本地文件资源(NodeJS)，甚至异步的逻辑写太多了，以至于出现回调地狱，而JS也提出了Promise, Async Await等方法来避免回调地狱。 复习JavaScript的回调机制 做一个小实验，如果你的浏览器是Chrome内核的，可以直接按F12打开开发者工具，首先执行一下需要的辅助函数 function write_log(str){ var now = new Date(); var log = now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()+" "+str; console.lo... </summary> </entry> <entry><title>Javascript 对象继承</title><link href="/2018/04/javascript-inherit/" rel="alternate" type="text/html" title="Javascript 对象继承" /><published>2018-04-28T19:16:45+08:00</published> <updated>2021-05-05T10:44:27+08:00</updated> <id>/2018/04/javascript-inherit/</id> <content src="/2018/04/javascript-inherit/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="开发语言" /> <summary> Javascript 没有直接的对象继承，可以通过原型继承的方式来实现，下面是一种实现方法。 定义父类 将方法写到原型（prototype)上 function Person(name, age) { this.name = name; this.age = age; }; Person.prototype.greeting = function() { console.log('Hi! I\'m ' + this.name + '.'); }; 定义子类 function Teacher(name, age, title) { //初始化父类的属性 Person.call(this, name, age); //Person.apply(this,[name,age]); //初始化子类的属性 this.title = title } //... </summary> </entry> </feed>
