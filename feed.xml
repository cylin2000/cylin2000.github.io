<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Calvin's Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-07-18T12:24:36+08:00</updated> <author> <name>Calvin</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Calvin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>补课：汇编语言基础</title><link href="/2021/07/assembly-primer/" rel="alternate" type="text/html" title="补课：汇编语言基础" /><published>2021-07-17T09:41:00+08:00</published> <updated>2021-07-17T09:41:00+08:00</updated> <id>/2021/07/assembly-primer/</id> <content src="/2021/07/assembly-primer/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 万丈高楼平地起，勿在浮沙筑高台 我们平常学习的编程语言，如 C, C++, Java, C#,Python等等都是高级语言。我们也都知道，机器只能理解执行0101的代码，那高级语言如何转换为机器语言的？ 其实高级语言是通过编译器转换为机器语言的，在编译过程中间会生成一个过渡性的语言，叫汇编语言，高级语言屏蔽了实现的细节，如对内存的操作，而汇编语言是低级语言，是通过指令直接对硬件，如CPU的寄存器和内存进行操作的语言，早期的程序员也是直接写汇编语言来控制程序运行，了解汇编语言有助于明白底层的实现，进而可以增加排错能力，以及优化代码。 一点背景 汇编语言是针对CPU设计的，每一种CPU都有自己的汇编指令集，所以针对不同的CPU的汇编语言写法是不一样的，比如 ARM(安卓手机CPU) 和 Intel(常用PC CPU) 他们的指令格式是不一样的。 即便是同一款CPU，指令格... </summary> </entry> <entry><title>在 Ubuntu 上安装 Nginx 并支持 PHP</title><link href="/2021/05/install-php-for-nginx-on-ubuntu/" rel="alternate" type="text/html" title="在 Ubuntu 上安装 Nginx 并支持 PHP" /><published>2021-05-05T13:45:00+08:00</published> <updated>2021-06-14T13:05:29+08:00</updated> <id>/2021/05/install-php-for-nginx-on-ubuntu/</id> <content src="/2021/05/install-php-for-nginx-on-ubuntu/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 最近整理了一下博客系统，迁移到了Jekyll模板，发现Apache2服务器不支持中文路径，研究了一番没有找到解决方法，测试了nginx可以默认支持中文路径，遂整理一下，把 Apache2 换成了 Nginx 本文所述的步骤在 Ubuntu 18.04 上测试通过。 安装 Nginx 使用 apt-get 安装 nginx # 更新 APT 源 sudo apt-get update # 安装 nginx sudo apt-get install nginx 安装完成后测试一下 nginx 的版本，查看是否安装成功 nginx -v 启动 nginx service nginx start 服务自动后，输入服务器所在的IP地址，应该可以看到nginx的欢迎界面 “Welcome to nginx!” 安装 PHP 不像 Apache2, Nginx 没有包含... </summary> </entry> <entry><title>基于 PowerShell 的 Web Server 简单实现</title><link href="/2020/11/powershell-webserver/" rel="alternate" type="text/html" title="基于 PowerShell 的 Web Server 简单实现" /><published>2020-11-05T17:00:00+08:00</published> <updated>2021-05-11T21:56:07+08:00</updated> <id>/2020/11/powershell-webserver/</id> <content src="/2020/11/powershell-webserver/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="编程语言" /> <summary> 最近项目中有个需求，就是现有很多已经存在的PowerShell脚本，但是命令行的方式不是很方便使用，希望能集成到一个Web界面，简化用户操作难度。 经过简单调研，发现可以使用 HttpListener 创建一个对象在本地侦听在自对应端口，就可以实现一个简单的Web服务器，具体实现如下。 简单实现 先创建一个POC，代码如下，保存到 webserver.ps1 $http = [System.Net.HttpListener]::new() $http.Prefixes.Add("http://localhost:8080/") $http.Start() if ($http.IsListening) { write-host "HTTP Server Ready! " -f 'black' -b 'gre' write-host "$($http.Prefixe... </summary> </entry> <entry><title>Bash 踩坑指南</title><link href="/2020/04/bash-experience/" rel="alternate" type="text/html" title="Bash 踩坑指南" /><published>2020-04-07T17:44:00+08:00</published> <updated>2020-04-07T17:44:00+08:00</updated> <id>/2020/04/bash-experience/</id> <content src="/2020/04/bash-experience/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 最近项目逐步迁移到AWS平台上，相关的代码管理和自动化部署也由TFS迁移到GitHub+Jenkins方案上，为此写了不少的bash脚本用来自动化部署和测试，也踩了相当多的坑，在此总结一下。 Shell的种类 和Windows平台不一样，在Linux系统下，有多种Shell，所以同样的脚本，不同的解释器执行结果可能是不一样的，下面列举了常见的Shell种类。 sh : sh 的全称是 Bourne shell，由 AT&amp;amp;T 公司的 Steve Bourne开发，为了纪念他，就用他的名字命名了，是第一个流行的shell bash : Bourne-Again SHell dash ： theDebian Almquist Shell， Ubuntu的/bin/sh默认链接到dash csh, tcsh, zsh, oh-my-zsh busyb... </summary> </entry> <entry><title>Docker 使用整理</title><link href="/2020/03/docker/" rel="alternate" type="text/html" title="Docker 使用整理" /><published>2020-03-25T17:44:00+08:00</published> <updated>2020-03-25T17:44:00+08:00</updated> <id>/2020/03/docker/</id> <content src="/2020/03/docker/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> Docker 安装 Windows https://www.docker.com/docker-windows Ubuntu https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#uninstall-old-versions # Uninstall Old Docker sudo apt-get remove docker docker-engine docker.io # Update APT-GET Repository sudo apt-get update # Install packages to allow apt to use a repository over HTTPS: sudo apt-get install apt-transport-https ca-certificat... </summary> </entry> </feed>
