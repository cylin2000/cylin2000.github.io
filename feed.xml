<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Calvin's Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-01-01T18:23:58+08:00</updated> <author> <name>Calvin</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Calvin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>圣诞特辑-交换礼物</title><link href="/2021/08/gift-exchange/" rel="alternate" type="text/html" title="圣诞特辑-交换礼物" /><published>2021-08-12T15:14:00+08:00</published> <updated>2022-01-01T11:31:19+08:00</updated> <id>/2021/08/gift-exchange/</id> <content src="/2021/08/gift-exchange/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <summary> 圣诞节到了，Team里面的小伙伴组织了一个交换礼物的活动，我也奉命接下了写个小工具的任务。 需求 需求很简单，就是将 人员名单 和 礼物清单 排成两列，然后随机摇出新的匹对，这样每个人就得到了新的礼物。 算法 核心算法其实很简单，就是将数组进行随机乱序排列，代码如下 从后往前遍历，随机一个前面的数的坐标和当前数交换，所有位置的数字都交换完成 function shuffle(arr) { let i = arr.length; while (i) { let j = Math.floor(Math.random() * i--); [arr[j], arr[i]] = [arr[i], arr[j]]; } } 代码 采用 web 实现，这样表现力强一点，选择了 bootstrap 框架做为... </summary> </entry> <entry><title>C# Async Await 探究</title><link href="/2021/08/csharp-async-await/" rel="alternate" type="text/html" title="C# Async Await 探究" /><published>2021-08-12T15:14:00+08:00</published> <updated>2021-08-12T15:14:00+08:00</updated> <id>/2021/08/csharp-async-await/</id> <content src="/2021/08/csharp-async-await/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <category term="软件使用" /> <summary> 这篇文章源于同事问我的一个问题, async await 会不会创建新的线程? 当时直观的感觉是会创建，因为觉得 async await 只是语法糖，当前线程没有被 block，而后台肯定需要做事，所以必然会创建新的线程去执行任务才对。 然而查了文档，发现官方文档明确说明： async 和 await 关键字不会创建其他线程。 因为异步方法不会在其自身线程上运行，因此它不需要多线程。 参考：https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model#threads 如果没有创建线程，到底谁在后台执行任务呢？带着这个问题，好好捋一下 async await 这个新特性。 子线程 在没有 async 和 awai... </summary> </entry> <entry><title>解决端口占用问题</title><link href="/2021/08/fix-port-in-use-issue/" rel="alternate" type="text/html" title="解决端口占用问题" /><published>2021-08-01T17:15:00+08:00</published> <updated>2022-01-01T08:48:42+08:00</updated> <id>/2021/08/fix-port-in-use-issue/</id> <content src="/2021/08/fix-port-in-use-issue/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <summary> 端口被占用是指当你的可执行程序运行时需要在某个端口侦听时，发现该端口被其他程序给占用了，导致该应用程序无法执行。 如: jekyll 默认需要在端口 4000 侦听，当被占用的时候，会显示错误 Permission denied - bind for 127.0.0.1:4000 本地的 4000 端口被占用。 解决方法 查看端口的占用情况 # 查看端口占用情况 netstat -ano # 也可以使用 find 过滤 netstat -ano | find "4000" 参数： -a：显示所有链接和侦听端口 -n：以数字形式显示地址和端口号 -o：显示拥有的与每个连接关联的进程 ID 即 PID 查看当前占用端口服务 tasklist /sv... </summary> </entry> <entry><title>汇编语言基础</title><link href="/2021/07/assembly-primer/" rel="alternate" type="text/html" title="汇编语言基础" /><published>2021-07-17T09:41:00+08:00</published> <updated>2022-01-01T10:57:14+08:00</updated> <id>/2021/07/assembly-primer/</id> <content src="/2021/07/assembly-primer/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <summary> 最近查一些文章，涉及到了汇编语言，所以翻出一些资料复习一下。 我们平常学习的编程语言，如 C, C++, Java, C#,Python等等都是高级语言。我们也都知道，机器只能理解执行0101的代码，那高级语言如何转换为机器语言的？ 其实高级语言是通过编译器转换为机器语言的，在编译过程中间会生成一个过渡性的语言，叫汇编语言，高级语言屏蔽了实现的细节，如对内存的操作，而汇编语言是低级语言，是通过指令直接对硬件，如CPU的寄存器和内存进行操作的语言，早期的程序员也是直接写汇编语言来控制程序运行，了解汇编语言有助于明白底层的实现，进而可以增加排错能力，以及优化代码。 一点背景 汇编语言是针对CPU设计的，每一种CPU都有自己的汇编指令集，所以针对不同的CPU的汇编语言写法是不一样的，比如 ARM(安卓手机CPU) 和 Intel(常用PC CPU) 他们的指令格式是不一样的。 即便... </summary> </entry> <entry><title>在 Ubuntu 上安装 Nginx 并支持 PHP</title><link href="/2021/05/install-php-for-nginx-on-ubuntu/" rel="alternate" type="text/html" title="在 Ubuntu 上安装 Nginx 并支持 PHP" /><published>2021-05-05T13:45:00+08:00</published> <updated>2022-01-01T08:48:42+08:00</updated> <id>/2021/05/install-php-for-nginx-on-ubuntu/</id> <content src="/2021/05/install-php-for-nginx-on-ubuntu/" /> <author> <name>Calvin</name> </author> <category term="技术" /> <summary> 最近整理了一下博客系统，迁移到了Jekyll模板，发现Apache2服务器不支持中文路径，研究了一番没有找到解决方法，测试了nginx可以默认支持中文路径，遂整理一下，把 Apache2 换成了 Nginx 本文所述的步骤在 Ubuntu 18.04 上测试通过。 安装 Nginx 使用 apt-get 安装 nginx # 更新 APT 源 sudo apt-get update # 安装 nginx sudo apt-get install nginx 安装完成后测试一下 nginx 的版本，查看是否安装成功 nginx -v 启动 nginx service nginx start 服务自动后，输入服务器所在的IP地址，应该可以看到nginx的欢迎界面 “Welcome to nginx!” 安装 PHP 不像 Apache2, Nginx 没有包含... </summary> </entry> </feed>
